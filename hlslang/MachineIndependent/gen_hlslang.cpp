#line 2 "Gen_hlslang.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 188
#define YY_END_OF_BUFFER 189
static yyconst short int yy_accept[482] =
    {   0,
        0,    0,    0,    0,  189,  187,  186,  186,  170,  187,
      176,  181,  165,  166,  174,  173,  162,  171,  169,  175,
      136,  136,  163,  159,  177,  164,  178,  182,  128,  167,
      168,  180,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  160,  179,  161,  172,  185,  188,  187,  184,
      156,    0,  183,  142,  150,  145,  140,  148,  138,  149,
      139,  131,  137,    0,  141,  130,  134,  135,    0,  132,
      136,    0,  136,  157,  153,  155,  154,  158,  128,  146,
      152,  128,  128,  128,  128,  128,  128,  128,  128,    7,

      128,  128,  128,  128,  128,  128,  128,  128,  128,   10,
       12,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  147,  151,  184,    0,  131,    0,
        1,  130,    0,  130,  134,  135,    0,  129,  133,  143,
      144,  101,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,    8,  128,  128,  128,
      128,   17,  128,  128,  128,  128,   13,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,

        0,  131,    0,  130,  129,  133,   22,  128,  125,  128,
      128,  128,  128,  128,  128,   11,  104,  128,  128,  128,
      128,  109,   56,  128,  128,   18,   69,   70,   71,  128,
      119,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  107,   25,  128,
       19,  128,  128,  128,  128,  128,   21,  128,  128,   23,
       75,   76,   77,    5,  102,    2,  128,  128,  128,  128,
      128,   26,   61,   15,   57,   58,   59,   60,  128,   14,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  120,
      128,  128,  128,  128,  128,  128,  128,  128,   20,   72,

       73,   74,  128,  103,  128,  127,  128,  128,    9,  128,
      128,  128,  121,  116,   62,   63,   64,   65,   16,   66,
       67,   68,  128,  128,  128,  112,  128,   79,  128,  128,
      108,  115,  128,   28,  128,  124,    3,   24,  100,  110,
      128,  128,  128,  128,  128,   78,  128,  128,  111,   27,
      128,  128,  128,  128,  128,  128,  128,   38,   39,   40,
       41,   42,   43,   44,   45,   46,  128,  128,  128,  128,
       90,  128,   94,  105,    4,  128,  128,    6,  117,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   29,   30,
       31,   32,   33,   34,   35,   36,   37,  128,  128,  113,

       80,  128,  128,  128,  128,  128,  128,  106,  128,  128,
      128,  128,  122,  114,  118,  126,   81,   83,   87,  128,
      128,  128,   95,   96,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
       91,   88,  128,   98,   97,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  123,  128,  128,
      128,   99,  128,  128,  128,   85,  128,  128,  128,   82,
       84,   86,  128,  128,  128,  128,   92,  128,   93,   89,
        0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    7,    1,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   21,   21,   22,   22,   23,   24,   25,
       26,   27,   28,    1,   29,   30,   31,   32,   33,   34,
       35,   36,   35,   35,   35,   37,   35,   35,   35,   35,
       35,   38,   39,   40,   41,   35,   35,   42,   35,   35,
       43,    1,   44,   45,   46,    1,   47,   48,   49,   50,

       51,   52,   53,   54,   55,   35,   56,   57,   58,   59,
       60,   61,   35,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,   74,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[75] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    2,    2,    2,    2,
        2,    2,    1,    1,    1,    1,    1,    1,    2,    2,
        2,    2,    2,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    1,    1,    1,    3,    2,    2,    2,    2,
        2,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        1,    1,    1,    1
    } ;

static yyconst short int yy_base[487] =
    {   0,
        0,    0,   74,    0,  725,  726,  726,  726,  698,  718,
      696,  142,  726,  726,  695,  139,  726,  138,  136,  151,
      164,  154,  726,  726,  134,  694,  136,  726,    0,  726,
      726,  143,  656,  127,  147,  148,  134,  170,  658,  670,
      160,  656,  668,  132,  649,  148,  662,  179,  169,  181,
      177,  658,  726,  183,  726,  726,  726,  726,  696,    0,
      726,  705,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  240,  726,  706,  726,  279,  210,  320,  266,  726,
      726,    0,    0,  682,  726,  726,  726,  681,    0,  726,
      726,  648,  645,  653,  640,  655,  642,  648,  636,  633,

      634,  631,  631,  637,  625,  632,  629,  626,  632,    0,
      185,  629,  623,  628,  630,  620,  634,  634,  171,  623,
      620,  609,  192,  623,  195,  622,  611,  614,  615,  209,
      618,  623,  193,  616,  726,  726,    0,  303,  726,  667,
      726,    0,  347,  726,  726,  726,  286,  362,  252,  726,
      726,    0,  612,  621,  603,  603,  147,  618,  615,  615,
      611,  603,  609,  596,  607,  610,    0,  596,  603,  599,
      588,  369,  599,  589,  599,  590,    0,  592,  590,  591,
      580,  583,  581,  591,  577,  215,  576,  578,  574,  574,
      585,  584,  570,  258,  578,  573,  567,  580,  582,  571,

      327,  383,  390,  405,  726,  726,  309,  571,    0,  563,
      561,  569,  558,  575,  564,    0,    0,  558,  568,  568,
      553,    0,  373,  557,  551,    0,    0,    0,    0,  552,
        0,  558,  549,  554,  559,  554,  545,  545,  549,  541,
      544,  548,  543,  552,  551,  542,  533,    0,    0,  547,
      411,  536,  536,  541,  540,  532,    0,  527,  539,    0,
        0,    0,    0,    0,    0,    0,  530,  531,  525,  535,
      526,    0,  425,  429,    0,  516,  515,  514,  530,    0,
      528,  511,  517,  522,  526,  526,  510,  514,  521,    0,
      519,  521,  516,  504,  513,  519,  503,  513,    0,    0,

        0,    0,  501,    0,  503,    0,  499,  505,    0,  494,
      494,  507,    0,  509,    0,  487,  486,  485,    0,  484,
      483,  482,  332,  414,  432,    0,  502,    0,  501,  488,
        0,    0,  495,    0,  483,    0,    0,    0,    0,    0,
      480,  492,  490,  483,  489,    0,  482,  487,    0,    0,
      480,  435,  442,  445,  448,  451,  454,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  487,  486,  483,  471,
      458,  481,  460,    0,    0,  481,  479,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  478,  477,    0,

        0,  495,  494,  493,  483,  490,  459,    0,  489,  488,
      478,  485,    0,    0,    0,    0,  478,  316,  478,  485,
      472,  438,    0,    0,  471,  469,  445,  443,  214,  444,
      461,  453,  445,  457,  448,  440,  439,  428,  437,  434,
      436,  442,  416,    0,    0,  408,  406,  380,  381,  372,
      217,  364,  364,  353,  337,  348,  342,    0,  319,  328,
      326,    0,  303,  292,  271,    0,  272,  254,  240,    0,
        0,    0,  234,  213,  181,  150,    0,  123,    0,    0,
      726,  504,  506,  508,  511,  165
    } ;

static yyconst short int yy_def[487] =
    {   0,
      481,    1,  481,    3,  481,  481,  481,  481,  481,  482,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,   21,  481,  481,  481,  481,  481,  481,  483,  481,
      481,  481,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  481,  481,  481,  481,  481,  481,  481,  484,
      481,  482,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  485,  481,  481,   21,  481,  481,  481,
      481,  486,   22,  481,  481,  481,  481,  481,  483,  481,
      481,  483,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  481,  481,  484,  481,  481,  485,
      481,   76,  481,  481,  481,  481,  481,  481,  486,  481,
      481,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,

      481,  481,  481,  481,  481,  481,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
        0,  481,  481,  481,  481,  481
    } ;

static yyconst short int yy_nxt[801] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   22,   22,   22,
       22,   22,   23,   24,   25,   26,   27,   28,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   30,   31,   32,   29,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   29,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   52,   29,   29,   29,
       53,   54,   55,   56,    6,   57,   58,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,   59,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,

        6,    6,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,    6,    6,    6,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,    6,    6,    6,    6,   65,   68,
       70,   72,   72,   72,   72,   72,   72,   72,   84,   85,
       73,   87,   88,   71,   69,   74,  149,   66,   90,   83,
       83,   83,   83,   83,   83,   83,   75,   76,  114,   77,
       77,   77,   77,   77,   77,   78,   93,   91,   94,  480,
      101,  115,  102,   95,  117,  481,   79,   80,   98,   80,

       81,  103,   99,   96,   81,   82,   97,  100,  135,  211,
      212,  110,  118,  479,   79,   80,  104,   80,  111,  125,
       81,  481,  126,  180,  105,  120,  106,  132,   81,  107,
      127,   82,  121,  122,  181,  129,  133,  128,  185,  130,
      478,  170,  123,  131,  171,  124,  145,  198,  172,  199,
      145,  481,  188,  186,  136,   72,   72,   72,   72,   72,
       72,   72,  189,  194,  477,  438,  145,  439,  459,  243,
      460,  195,  138,  139,  145,  139,  147,  481,  147,  244,
      476,  148,  148,  148,  148,  148,  148,  148,  206,  475,
      138,  139,  206,  139,  142,  142,  142,  142,  142,  142,

      142,  148,  148,  148,  148,  148,  148,  148,  206,  252,
      474,  143,  144,  201,  144,  201,  206,  253,  202,  202,
      202,  202,  202,  202,  202,  260,  261,  262,  263,  143,
      144,  473,  144,   76,  472,   78,   78,   78,   78,   78,
       78,   78,  202,  202,  202,  202,  202,  202,  202,  358,
      359,  360,   79,   80,  428,   80,  146,  203,  471,  203,
      146,  429,  204,  204,  204,  204,  204,  204,  204,  470,
       79,   80,  469,   80,  468,  467,  146,  148,  148,  148,
      148,  148,  148,  148,  146,  226,  227,  228,  229,  275,
      276,  277,  278,  466,  465,  205,  464,  205,  202,  202,

      202,  202,  202,  202,  202,  204,  204,  204,  204,  204,
      204,  204,  463,  205,  462,  205,  139,  461,  139,  230,
      204,  204,  204,  204,  204,  204,  204,  299,  300,  301,
      302,  361,  362,  363,  139,  458,  139,  457,  144,  456,
      144,  315,  316,  317,  318,  319,  320,  321,  322,  364,
      365,  366,  380,  381,  382,  455,  144,  454,  144,  383,
      384,  385,  386,  387,  388,  389,  390,  391,  392,  393,
      394,  395,  396,  397,  402,  403,  404,  409,  410,  453,
      452,  451,  450,  449,  448,  447,  446,  445,  405,  444,
      411,  443,  442,  441,  440,  406,  437,  412,  436,  435,

      434,  433,  432,  407,   62,   62,   62,   89,   89,  137,
      137,  140,  140,  140,  431,  430,  427,  426,  425,  424,
      423,  422,  421,  420,  419,  418,  417,  416,  415,  414,
      413,  408,  401,  400,  399,  398,  379,  378,  377,  376,
      375,  374,  373,  372,  371,  370,  369,  368,  367,  357,
      356,  355,  354,  353,  352,  351,  350,  349,  348,  347,
      346,  345,  344,  343,  342,  341,  340,  339,  338,  337,
      336,  335,  334,  333,  332,  331,  330,  329,  328,  327,
      326,  325,  324,  323,  314,  313,  312,  311,  310,  309,
      308,  307,  306,  305,  304,  303,  298,  297,  296,  295,

      294,  293,  292,  291,  290,  289,  288,  287,  286,  285,
      284,  283,  282,  281,  280,  279,  274,  273,  272,  271,
      270,  269,  268,  267,  266,  265,  264,  259,  258,  257,
      256,  255,  254,  251,  250,  249,  248,  247,  246,  245,
      242,  241,  240,  239,  238,  237,  236,  235,  234,  233,
      232,  231,  225,  224,  223,  222,  221,  220,  219,  218,
      217,  216,  215,  214,  213,  210,  209,  208,  207,  141,
      200,  197,  196,  193,  192,  191,  190,  187,  184,  183,
      182,  179,  178,  177,  176,  175,  174,  173,  169,  168,
      167,  166,  165,  164,  163,  162,  161,  160,  159,  158,

      157,  156,  155,  154,  153,  152,  151,  150,  141,   63,
       74,  134,  119,  116,  113,  112,  109,  108,   92,   86,
       67,   64,   63,   61,  481,    5,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481

    } ;

static yyconst short int yy_chk[801] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,   12,   16,
       18,   19,   19,   19,   19,   19,   19,   19,   25,   25,
       20,   27,   27,   18,   16,   20,  486,   12,   32,   22,
       22,   22,   22,   22,   22,   22,   20,   21,   44,   21,
       21,   21,   21,   21,   21,   21,   34,   32,   34,  478,
       37,   44,   37,   35,   46,   22,   21,   21,   36,   21,

       21,   37,   36,   35,   21,   21,   35,   36,   54,  157,
      157,   41,   46,  476,   21,   21,   38,   21,   41,   49,
       21,   22,   49,  119,   38,   48,   38,   51,   21,   38,
       49,   21,   48,   48,  119,   50,   51,   49,  123,   50,
      475,  111,   48,   50,  111,   48,   77,  133,  111,  133,
       77,   77,  125,  123,   54,   72,   72,   72,   72,   72,
       72,   72,  125,  130,  474,  429,   77,  429,  451,  186,
      451,  130,   72,   72,   77,   72,   79,   77,   79,  186,
      473,   79,   79,   79,   79,   79,   79,   79,  149,  469,
       72,   72,  149,   72,   76,   76,   76,   76,   76,   76,

       76,  147,  147,  147,  147,  147,  147,  147,  149,  194,
      468,   76,   76,  138,   76,  138,  149,  194,  138,  138,
      138,  138,  138,  138,  138,  207,  207,  207,  207,   76,
       76,  467,   76,   78,  465,   78,   78,   78,   78,   78,
       78,   78,  201,  201,  201,  201,  201,  201,  201,  323,
      323,  323,   78,   78,  418,   78,   78,  143,  464,  143,
       78,  418,  143,  143,  143,  143,  143,  143,  143,  463,
       78,   78,  461,   78,  460,  459,   78,  148,  148,  148,
      148,  148,  148,  148,   78,  172,  172,  172,  172,  223,
      223,  223,  223,  457,  456,  148,  455,  148,  202,  202,

      202,  202,  202,  202,  202,  203,  203,  203,  203,  203,
      203,  203,  454,  148,  453,  148,  202,  452,  202,  172,
      204,  204,  204,  204,  204,  204,  204,  251,  251,  251,
      251,  324,  324,  324,  202,  450,  202,  449,  204,  448,
      204,  273,  273,  273,  273,  274,  274,  274,  274,  325,
      325,  325,  352,  352,  352,  447,  204,  446,  204,  353,
      353,  353,  354,  354,  354,  355,  355,  355,  356,  356,
      356,  357,  357,  357,  371,  371,  371,  373,  373,  443,
      442,  441,  440,  439,  438,  437,  436,  435,  371,  434,
      373,  433,  432,  431,  430,  371,  428,  373,  427,  426,

      425,  422,  421,  371,  482,  482,  482,  483,  483,  484,
      484,  485,  485,  485,  420,  419,  417,  412,  411,  410,
      409,  407,  406,  405,  404,  403,  402,  399,  398,  377,
      376,  372,  370,  369,  368,  367,  351,  348,  347,  345,
      344,  343,  342,  341,  335,  333,  330,  329,  327,  322,
      321,  320,  318,  317,  316,  314,  312,  311,  310,  308,
      307,  305,  303,  298,  297,  296,  295,  294,  293,  292,
      291,  289,  288,  287,  286,  285,  284,  283,  282,  281,
      279,  278,  277,  276,  271,  270,  269,  268,  267,  259,
      258,  256,  255,  254,  253,  252,  250,  247,  246,  245,

      244,  243,  242,  241,  240,  239,  238,  237,  236,  235,
      234,  233,  232,  230,  225,  224,  221,  220,  219,  218,
      215,  214,  213,  212,  211,  210,  208,  200,  199,  198,
      197,  196,  195,  193,  192,  191,  190,  189,  188,  187,
      185,  184,  183,  182,  181,  180,  179,  178,  176,  175,
      174,  173,  171,  170,  169,  168,  166,  165,  164,  163,
      162,  161,  160,  159,  158,  156,  155,  154,  153,  140,
      134,  132,  131,  129,  128,  127,  126,  124,  122,  121,
      120,  118,  117,  116,  115,  114,  113,  112,  109,  108,
      107,  106,  105,  104,  103,  102,  101,  100,   99,   98,

       97,   96,   95,   94,   93,   92,   88,   84,   74,   62,
       59,   52,   47,   45,   43,   42,   40,   39,   33,   26,
       15,   11,   10,    9,    5,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
#line 1 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
#define INITIAL 0
/*-*-C++-*-

// Copyright (c) The HLSL2GLSLFork Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE.txt file.

*/
/* Based on
ANSI C grammar, Lex specification

In 1985, Jeff Lee published this Lex specification together with a Yacc 
grammar for the April 30, 1985 ANSI C draft.  Tom Stockfisch reposted 
both to net.sources in 1987; that original, as mentioned in the answer 
to question 17.25 of the comp.lang.c FAQ, can be ftp'ed from ftp.uu.net, 
file usenet/net.sources/ansi.c.grammar.Z. 

I intend to keep this version as close to the current C Standard grammar 
as possible; please let me know if you discover discrepancies. 

Jutta Degener, 1995 
*/
#define YY_NO_UNPUT 1
#line 34 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
#define YY_NO_UNISTD_H

#include <stdio.h>
#include <stdlib.h>
#include "ParseHelper.h"
#include "hlslang_tab.h"

/* windows only pragma */
#ifdef _MSC_VER
#pragma warning(disable : 4102)
#endif

int yy_input(char* buf, int max_size);
static TSourceLoc lexlineno = { 0, 0 };

#ifdef _WIN32
    extern int yyparse(TParseContext&);
    #define YY_DECL int yylex(YYSTYPE* pyylval, TParseContext& parseContext)    
#else
    extern int yyparse(void*);
    #define YY_DECL int yylex(YYSTYPE* pyylval, void* parseContextLocal)
    #define parseContext (*((TParseContext*)(parseContextLocal)))		
#endif
 
#define YY_INPUT(buf,result,max_size) (result = yy_input(buf, max_size))

#define YY_NEVER_INTERACTIVE 1
#define FIELDS 1

#line 754 "Gen_hlslang.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 68 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"

#line 903 "Gen_hlslang.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 482 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 726 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 69 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{ /* ?? carriage and/or line-feed? */ };
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 71 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(CONST_QUAL); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 72 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(STATIC_QUAL); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 73 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(UNIFORM); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 75 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(BREAK); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 76 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(CONTINUE); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 77 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(DO); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 78 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(FOR); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 79 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(WHILE); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 81 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(IF); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 82 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(ELSE); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 84 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(IN_QUAL); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 85 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(OUT_QUAL); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 86 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(INOUT_QUAL); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 88 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(FLOAT_TYPE); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 89 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(FLOAT_TYPE); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 90 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(INT_TYPE); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 91 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(INT_TYPE); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 92 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(INT_TYPE); /* @TODO proper unsigned int? */ }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 93 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(INT_TYPE); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 94 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(VOID_TYPE); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 95 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(BOOL_TYPE); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 96 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(BOOL_TYPE); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 97 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(STRING_TYPE); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 98 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; pyylval->lex.b = true;  return(BOOLCONSTANT); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 99 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; pyylval->lex.b = false; return(BOOLCONSTANT); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 101 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(DISCARD); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 102 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(RETURN); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 104 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(MATRIX2x2); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 105 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(MATRIX2x3); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 106 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(MATRIX2x4); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 108 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(MATRIX3x2); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 109 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(MATRIX3x3); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 110 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(MATRIX3x4); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 112 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(MATRIX4x2); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 113 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(MATRIX4x3); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 114 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(MATRIX4x4); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 116 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(HMATRIX2x2); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 117 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(HMATRIX2x3); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 118 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(HMATRIX2x4); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 120 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(HMATRIX3x2); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 121 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(HMATRIX3x3); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 122 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(HMATRIX3x4); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 124 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(HMATRIX4x2); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 125 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(HMATRIX4x3); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 126 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(HMATRIX4x4); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 128 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(FMATRIX2x2); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 129 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(FMATRIX2x3); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 130 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(FMATRIX2x4); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 132 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(FMATRIX3x2); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 133 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(FMATRIX3x3); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 134 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(FMATRIX3x4); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 136 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(FMATRIX4x2); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 137 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(FMATRIX4x3); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 138 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(FMATRIX4x4); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 140 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(HALF_TYPE); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 141 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(HALF_TYPE); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 142 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return (HVEC2); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 143 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return (HVEC3); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 144 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return (HVEC4); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 146 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(FIXED_TYPE); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 147 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return(FIXED_TYPE); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 148 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return (FVEC2); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 149 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return (FVEC3); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 150 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return (FVEC4); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 152 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return (VEC2); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 153 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return (VEC3); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 154 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return (VEC4); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 155 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return (IVEC2); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 156 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return (IVEC3); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 157 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return (IVEC4); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 158 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return (IVEC2); /* @TODO proper unsigned type? */ }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 159 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return (IVEC3); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 160 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return (IVEC4); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 161 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return (BVEC2); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 162 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return (BVEC3); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 163 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return (BVEC4); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 165 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return (VECTOR); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 166 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return (MATRIX); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 167 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return (REGISTER); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 169 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return SAMPLER1D; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 170 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return SAMPLER1DSHADOW; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 171 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return SAMPLER2D; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 172 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return SAMPLER2DSHADOW; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 173 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return SAMPLER2D_HALF; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 174 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return SAMPLER2D_FLOAT; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 175 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return SAMPLER3D; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 176 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return SAMPLERRECT; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 177 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return SAMPLERRECTSHADOW; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 179 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return SAMPLERGENERIC; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 180 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return SAMPLERCUBE; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 181 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return SAMPLERCUBE_HALF; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 182 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return SAMPLERCUBE_FLOAT; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 184 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return TEXTURE; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 185 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return TEXTURE; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 186 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return TEXTURE; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 187 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return TEXTURE; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 188 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return TEXTURE; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 189 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = true; return SAMPLERSTATE; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 191 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(STRUCT); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 193 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 195 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 196 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 197 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 198 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 199 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 200 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 201 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 203 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 204 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 205 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 207 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  /* just ignore it PaReservedWord(); return 0; */ }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 208 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  /* just ignore it PaReservedWord(); return 0; */ }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 209 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 210 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 211 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 212 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 213 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 215 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 216 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 217 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 218 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 220 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 222 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 223 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 225 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 226 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 228 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  
   pyylval->lex.line = lexlineno; 
   pyylval->lex.string = NewPoolTString(yytext); 
   return PaIdentOrType(*pyylval->lex.string, parseContext, pyylval->lex.symbol); 
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 234 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{ pyylval->lex.line = lexlineno; pyylval->lex.f = static_cast<float>(atof(yytext)); return(FLOATCONSTANT); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 235 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{ pyylval->lex.line = lexlineno; pyylval->lex.f = static_cast<float>(atof(yytext)); return(FLOATCONSTANT); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 236 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{ pyylval->lex.line = lexlineno; pyylval->lex.f = static_cast<float>(atof(yytext)); return(FLOATCONSTANT); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 237 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{ pyylval->lex.line = lexlineno; pyylval->lex.f = static_cast<float>(atof(yytext)); return(FLOATCONSTANT); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 239 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{ pyylval->lex.line = lexlineno; pyylval->lex.i = strtol(yytext, 0, 0); return(INTCONSTANT); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 240 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{ pyylval->lex.line = lexlineno; pyylval->lex.i = strtol(yytext, 0, 0); return(INTCONSTANT); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 241 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{ pyylval->lex.line = lexlineno; parseContext.error(lexlineno, "Invalid Octal number.", yytext, "", ""); parseContext.recover(); return 0;}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 242 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{ pyylval->lex.line = lexlineno; pyylval->lex.i = strtol(yytext, 0, 0); return(INTCONSTANT); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 248 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  int ret = PaParseComment(pyylval->lex.line, parseContext); if (!ret) return ret; }   
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 250 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(ADD_ASSIGN); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 251 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(SUB_ASSIGN); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 252 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(MUL_ASSIGN); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 253 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(DIV_ASSIGN); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 254 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(MOD_ASSIGN); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 255 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(LEFT_ASSIGN); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 256 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(RIGHT_ASSIGN); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 257 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(AND_ASSIGN); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 258 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(XOR_ASSIGN); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 259 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(OR_ASSIGN); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 261 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(INC_OP); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 262 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(DEC_OP); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 263 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(AND_OP); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 264 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(OR_OP); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 265 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(XOR_OP); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 266 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(LE_OP); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 267 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(GE_OP); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 268 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(EQ_OP); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 269 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(NE_OP); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 270 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(LEFT_OP); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 271 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(RIGHT_OP); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 272 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = false; return(SEMICOLON); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 273 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = false; return(LEFT_BRACE); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 274 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(RIGHT_BRACE); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 275 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; if (parseContext.inTypeParen) parseContext.lexAfterType = false; return(COMMA); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 276 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(COLON); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 277 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = false; return(EQUAL); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 278 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.lexAfterType = false; parseContext.inTypeParen = true; return(LEFT_PAREN); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 279 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; parseContext.inTypeParen = false; return(RIGHT_PAREN); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 280 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(LEFT_BRACKET); }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 281 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(RIGHT_BRACKET); }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 282 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{ BEGIN(FIELDS);  return(DOT); }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 283 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(BANG); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 284 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(DASH); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 285 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(TILDE); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 286 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(PLUS); }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 287 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(STAR); }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 288 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(SLASH); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 289 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(PERCENT); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 290 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(LEFT_ANGLE); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 291 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(RIGHT_ANGLE); }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 292 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(VERTICAL_BAR); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 293 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(CARET); }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 294 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(AMPERSAND); }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 295 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(QUESTION); }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 297 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  pyylval->lex.line = lexlineno; return(STRINGCONSTANT); }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 299 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{ 
BEGIN(INITIAL);      
    pyylval->lex.line = lexlineno;     
    pyylval->lex.string = NewPoolTString(yytext); 
    return FIELD_SELECTION; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 304 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 307 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{  }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(FIELDS):
#line 308 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{ (&parseContext)->AfterEOF = true; yy_delete_buffer(YY_CURRENT_BUFFER); yyterminate();}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 309 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
{ parseContext.infoSink.info << "FLEX: Unknown char " << yytext << "\n";
          return 0; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 312 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"
ECHO;
	YY_BREAK
#line 1940 "Gen_hlslang.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 482 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 482 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 481);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 312 "C:\\opt\\hlsl2glslfork\\hlslang\\MachineIndependent\\hlslang.l"



#include "preprocessor/mojoshader.h"
#define __MOJOSHADER_INTERNAL__ 1
#include "preprocessor/mojoshader_internal.h"
#include <cstring>

static hlmojo_Preprocessor* g_cpp;
static TParseContext* g_parseContext;

const TSourceLoc gNullSourceLoc = { NULL, 0 };

static int cpp_get_token (hlmojo_Preprocessor* pp, char* buf, int maxSize)
{
	const char *tokstr = NULL;
	unsigned int len = 0;
	Token token = TOKEN_UNKNOWN;
	tokstr = hlmojo_preprocessor_nexttoken (pp, &len, &token);
	if (tokstr == NULL)
		return 0;
		
	if (hlmojo_preprocessor_outofmemory(pp))
	{
		g_parseContext->error (gNullSourceLoc, "out of memory", "", "");
		GlobalParseContext->recover();
		buf[0] = 0;
		return 0;
	}	
	
	unsigned int line = 0;
	const char* fname = hlmojo_preprocessor_sourcepos (pp, &line);
	TSourceLoc loc;
	loc.file = fname;
	loc.line = line;
	SetLineNumber (loc, lexlineno);
	
	if (token == TOKEN_PREPROCESSING_ERROR)
	{
		g_parseContext->error (lexlineno, tokstr, "", "");
		GlobalParseContext->recover();
		buf[0] = 0;
	}
	else
	{
		if (len >= maxSize)
		{
			return maxSize;
		}
		else if (len > 0)
		{
			memcpy (buf, tokstr, len+1);
			return len;
		}
		return 0;
	}
	return 0;
} // cpp_get_token


//
// The YY_INPUT macro just calls this.  Maybe this could be just put into
// the macro directly.
//

int yy_input(char* buf, int max_size)
{
	int len;

    if ((len = cpp_get_token(g_cpp, buf, max_size)) == 0)
        return 0;
    if (len >= max_size)
        YY_FATAL_ERROR( "input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

    //debug code to dump the token stream to stdout
    //buf[len] = '\0';
    //printf( ":: %s\n", buf);

    buf[len] = ' ';
	return len+1;
}

int IncludeOpenCallback(MOJOSHADER_hlslang_includeType inctype,
                        const char *fname, const char *parent,
                        const char **outdataPtr, unsigned int *outbytesPtr,
                        MOJOSHADER_hlslang_malloc m, MOJOSHADER_hlslang_free f, void *d)
{
	Hlsl2Glsl_ParseCallbacks* callbacks = reinterpret_cast<Hlsl2Glsl_ParseCallbacks*>(d);
	std::string out;
	if (!callbacks->includeOpenCallback(inctype == MOJOSHADER_hlslang_INCLUDETYPE_SYSTEM,
										fname, out, callbacks->data))
	{
		return 0;
	}

	char* outdata = (char*) m(out.size() + 1, NULL);
	std::memcpy(outdata, out.data(), out.size());
	*outdataPtr = outdata;
	*outbytesPtr = out.size();
	return 1;
}

void IncludeCloseCallback(const char *data,
                          MOJOSHADER_hlslang_malloc m, MOJOSHADER_hlslang_free f, void *d)
{
	f(const_cast<char*>(data), NULL);
}

//
// Parse a string using yyparse.  We set up globals used by
// yywrap.
//
// Returns 0 for success, as per yyparse().
//
int PaParseString(char* source, TParseContext& parseContextLocal, Hlsl2Glsl_ParseCallbacks* callbacks)
{
	int sourceLen;

	if (!source) {
		parseContextLocal.error(gNullSourceLoc, "Null shader source string", "", "");
		parseContextLocal.recover();
		return 1;
	}
	
	sourceLen = (int) strlen(source);
	
	MOJOSHADER_hlslang_includeOpen openCallback = NULL;
    MOJOSHADER_hlslang_includeClose closeCallback = NULL;
	void* data = NULL;
	if (callbacks)
	{
		openCallback = IncludeOpenCallback;
		closeCallback = IncludeCloseCallback;
		data = callbacks;
	}

	hlmojo_Preprocessor* pp = hlmojo_preprocessor_start("", source, sourceLen,
		openCallback,
		closeCallback,
		NULL, // defines
		0, // define count
		MOJOSHADER_hlslang_internal_malloc,
		MOJOSHADER_hlslang_internal_free,
		data);
	g_cpp = pp;
	g_parseContext = &parseContextLocal;
	
    yyrestart(0);
    (&parseContextLocal)->AfterEOF = false;
	lexlineno.file = NULL;
    lexlineno.line = 1;
	
	int result = 0;
   
    if (sourceLen >= 0)
	{
        int ret;
        #ifdef _WIN32
            ret = yyparse(parseContextLocal);            
        #else
            ret = yyparse((void*)(&parseContextLocal));
        #endif
        if (parseContextLocal.recoveredFromError || parseContextLocal.numErrors > 0)
             result = 1;
        else
             result = 0;
    }
    else
	{
        result = 0;
	}
	
	hlmojo_preprocessor_end (pp);
	g_cpp = NULL;
	g_parseContext = NULL;
	
	return result;
}

void yyerror(const char *s)
{

	GlobalParseContext->error(lexlineno, "syntax error", GlobalParseContext->AfterEOF ? "" : yytext, s, "");
	GlobalParseContext->recover();
}

void PaReservedWord()
{
    GlobalParseContext->error(lexlineno, "Reserved word.", yytext, "", "");
    GlobalParseContext->recover();
}

int PaIdentOrType(TString& id, TParseContext& parseContextLocal, TSymbol*& symbol)
{
    symbol = parseContextLocal.symbolTable.find(id);
    if (parseContextLocal.lexAfterType == false && symbol && symbol->isVariable()) {
        TVariable* variable = static_cast<TVariable*>(symbol);
        if (variable->isUserType()) {
            parseContextLocal.lexAfterType = true;
            return TYPE_NAME;
        }
    }
    
    return IDENTIFIER;
}

int PaParseComment(TSourceLoc &lineno, TParseContext& parseContextLocal)
{
    int transitionFlag = 0;
    int nextChar;
    
    while (transitionFlag != 2) {
        nextChar = yyinput();
        if (nextChar == '\n')
             lineno.line++;
        switch (nextChar) {
        case '*' :
            transitionFlag = 1;
            break;
        case '/' :  /* if star is the previous character, then it is the end of comment */
            if (transitionFlag == 1) {
                return 1 ;
            }
            break;
        case EOF :
            /* Raise error message here */
            parseContextLocal.error(lexlineno, "End of shader found before end of comment.", "", "", "");
            GlobalParseContext->recover();
            return YY_NULL; 
        default :  /* Any other character will be a part of the comment */
            transitionFlag = 0;
        }
    }
    return 1;
}


void setInitialState()
{
    yy_start = 1;
}
